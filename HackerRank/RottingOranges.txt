import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        int t = Integer.parseInt(br.readLine());
        while(t-->0){
            int n = Integer.parseInt(br.readLine());
            ArrayList<String>grid = new ArrayList();
            for(int i=0;i<n;i++){
                String row = br.readLine();
                grid.add(row);
            }
            int count = driverMethod(n,n,grid);
            bw.write(count+"\n");
        }
        bw.flush();
    }
    public static int driverMethod(int n,int m,ArrayList<String>gr){
        int[][] grid = new int[n][m];
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                grid[i][j] = Integer.parseInt(String.valueOf(gr.get(i).charAt(j)));
            }
        }
        return rottingOranges(grid);
    }
    public static int rottingOranges(int[][]grid){
        int n = grid.length;
        int m = grid[0].length;
        int vis[][] = new int[n+1][m+1];
        Queue<Pair>q = new LinkedList();
        int countFresh = 0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==1)countFresh++;
                else if(grid[i][j]==2){
                    vis[i][j] = 2;
                    q.add(new Pair(i,j,0));
                }
                else vis[i][j] = 0;
            }
        }
        int t = 0;
        int[]dx = {-1,0,1,0};
        int[]dy = {0,1,0,-1};
        while(!q.isEmpty()){
            int r = q.peek().r;
            int c = q.peek().c;
            int tm = q.peek().tm;
            t = Math.max(tm,t);
            q.remove();
            for(int i=0;i<4;i++){
                int nr = r+dx[i];
                int nc = c+dy[i];
                if(nr>=0 && nr<n && nc>=0 && nc<m && vis[nr][nc]!=2 && grid[nr][nc]==1){
                    q.add(new Pair(nr,nc,t+1));
                    vis[nr][nc] = 2;
                }
            }
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(vis[i][j]!=2 && grid[i][j]==1)return -1;
            }
        }
        return t;
    }
}
class Pair{
    int r;
    int c;
    int tm;
    Pair(int r,int c,int tm){
        this.r = r;
        this.c = c;
        this.tm = tm;
    }
}