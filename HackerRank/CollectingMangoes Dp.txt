import java.io.*;
import java.util.*;

public class Solution {
    private static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    private static BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
    private static int mod = (int)1e9+7;
    public static void main(String[] args) throws IOException{
        int t = Integer.parseInt(br.readLine());
        while(t-->0){
            StringTokenizer st = new StringTokenizer(br.readLine());
            int n = Integer.parseInt(st.nextToken());
            int m = Integer.parseInt(st.nextToken());
            int[][] matrix = new int[n][m];
            for(int i=0;i<n;i++){
                st = new StringTokenizer(br.readLine());
                int j=0;
                while(st.hasMoreTokens()){
                    matrix[i][j++] = Integer.parseInt(st.nextToken());
                }
            }
            bw.write(collect(matrix)+"\n");
        }
        bw.flush();
    }
    public static int collect(int [][]m){
        int dp[][] = new int[m.length][m[0].length];
        dp[0][0] = m[0][0];
        for(int j=1;j<m[0].length;j++){
            dp[0][j] = dp[0][j-1]+m[0][j];
        }
        for(int i=1;i<m.length;i++)
            dp[i][0] = dp[i-1][0]+m[i][0];
        for(int i=1;i<m.length;i++){
            for(int j=1;j<m[i].length;j++){
                dp[i][j] = Math.max(dp[i-1][j],dp[i][j-1])+m[i][j];
            }
        }
        return dp[m.length-1][m[0].length-1];
    }
}