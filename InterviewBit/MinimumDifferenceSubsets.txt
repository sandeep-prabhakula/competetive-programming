// Minimum Difference Subsets
public class Solution {
    public int solve(ArrayList<Integer> A) {
        int range = 0;
        int n = A.size();
        if(n==1)return A.get(0);
        for(int i:A)range+=i;
        ArrayList<Integer>list = new ArrayList<>();
        list = subsetSum(A,range);
        int ans = Integer.MAX_VALUE;
        for(int i:list){
            ans = Math.min(ans,Math.abs(range-2*i));
        }
        return ans;
    }
    public static ArrayList<Integer> subsetSum(ArrayList<Integer>a,int sum){
        boolean [][] dp = new boolean[a.size()+1][sum+1];
        for(int i=0;i<a.size();i++){
            for(int j=0;j<sum+1;j++){
                if(i==0 && j==0)dp[i][j] = true;
                else if(i==0)dp[i][j] = false;
                else if(j==0)dp[i][j] = true;
            }
        }
        for(int i=1;i<a.size()+1;i++){
            for(int j=1;j<sum+1;j++){
                if(a.get(i-1)<=j)dp[i][j] = dp[i-1][j]||dp[i-1][j-a.get(i-1)];
                else dp[i][j] = dp[i-1][j];
            }
        }
        ArrayList<Integer>list = new ArrayList<>();
        for(int i=0;i<sum+1;i++){
            if(dp[a.size()][i])list.add(i);
        }
        return list;
    }
}
