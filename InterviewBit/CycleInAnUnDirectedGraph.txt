public class Solution {
    
    public int solve(int A, ArrayList<ArrayList<Integer>> B){
        // Create Adjacency List of this fuckedup useless input
        ArrayList<ArrayList<Integer>> ajacencyList = createList(A,B);
        // System.out.print(ajacencyList);
        if(isCycle(A,ajacencyList)){
            return 1;
        }
        
        return 0;
    }
    
    private ArrayList<ArrayList<Integer>> createList(int A, ArrayList<ArrayList<Integer>> B){
        ArrayList<ArrayList<Integer>> list = new ArrayList<>();
        for(int i=0; i<=A; i++){
            list.add(new ArrayList<Integer>());
        }
        int counter = 0;
        for(ArrayList<Integer> arr : B){
            // Since its undirected
            list.get(arr.get(0)).add(arr.get(1));
            list.get(arr.get(1)).add(arr.get(0));
        }
        return list;
    }
    
    public boolean isCycle(int A, ArrayList<ArrayList<Integer>> B) {
        boolean[] visited = new boolean[A+1];
        for(int i=0; i<=A; i++){
            if(!visited[i]){
                if(dfs(B,i, visited, -1)){
                    return true;
                }
            }
        }
        return false;
    }
    
    private boolean dfs(ArrayList<ArrayList<Integer>> adj, int src, boolean[] visited, int parent){
        visited[src] = true;
        for(int v : adj.get(src)){
            if(!visited[v]){
                if(dfs(adj, v, visited, src)){
                    return true;
                }
            }
            else if(v != parent){
                return true;
            }
        }
        return false;
    }
}