public class Solution {
    Map<Integer,Node>map = new HashMap<>();
    int c ;
    Node head = new Node(0,0);
    Node tail = new Node(0,0);
    public Solution(int capacity) {
        this.c = capacity;
        head.next = tail;
        tail.prev = head;
    }
    
    public int get(int key) {
        if(map.containsKey(key)){
            Node node = map.get(key);
            remove(node);
            insert(node);
            return node.value;
        }else{
            return -1;
        }
    }
    
    public void set(int key, int value) {
        if(map.containsKey(key)){
            remove(map.get(key));
        }
        if(map.size()==c)remove(tail.prev);
        insert(new Node(key,value));
    }
    private void insert(Node node){
        map.put(node.key,node);
        Node headNext = head.next;
        head.next = node;
        node.prev = head;
        headNext.prev = node;
        node.next = headNext;
    }
    private void remove(Node node){
        map.remove(node.key);
        node.prev.next = node.next;
        node.next.prev = node.prev;
    }
}
class Node{
    int key,value;
    Node prev,next;
    Node(int key,int value){
        this.key = key;
        this.value = value;
    }
}
