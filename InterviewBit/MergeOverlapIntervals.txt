/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    public ArrayList<Interval> merge(ArrayList<Interval> al) {
        Collections.sort(al,new Comparator() {
            @Override
            public int compare(Interval i,Interval j )
            {
            int x=i.start;
            int y=j.start;
            return Integer.compare(x, y);
            }
            });
        int i=0,j=1;
        Interval n,c;
        while(i<al.size()-1){
            c=al.get(i);
            n=al.get(j);

            //compares two nodes with end number and start number of node 1 and node2 respectively
            //if 1st node's end greater than or equals to second node's start
            if(c.end>=n.start){
                
                //merge intervals as below
                c.start=Math.min(c.start,n.start);
                c.end=Math.max(c.end,n.end);

                // remove the second node 
                al.remove(n);
                continue;
            }

            // increment the pointers
            i++;
            j++;
        }
        return al;
    }
}
