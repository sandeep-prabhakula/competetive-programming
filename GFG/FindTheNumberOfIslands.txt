//{ Driver Code Starts
import java.util.*;
import java.lang.*;
import java.io.*;
class GFG {
    public static void main(String[] args) throws IOException {
        BufferedReader br =
            new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(br.readLine().trim());
        while (T-- > 0) {
            String[] s = br.readLine().trim().split(" ");
            int n = Integer.parseInt(s[0]);
            int m = Integer.parseInt(s[1]);
            char[][] grid = new char[n][m];
            for (int i = 0; i < n; i++) {
                String[] S = br.readLine().trim().split(" ");
                for (int j = 0; j < m; j++) {
                    grid[i][j] = S[j].charAt(0);
                }
            }
            Solution obj = new Solution();
            int ans = obj.numIslands(grid);
            System.out.println(ans);
        }
    }
}
// } Driver Code Ends


class Solution {
    // Function to find the number of islands.
    public int numIslands(char[][] grid) {
        int n = grid.length;
        int m = grid[0].length;
        boolean [][] vis = new boolean[n+1][m+1];
        int count = 0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(!vis[i][j]&&grid[i][j]=='1'){
                    count++;
                    bfs(i,j,vis,grid);
                }
            }
        }
        return count;
    }
    
    public void bfs(int ro,int co,boolean[][]vis,char[][]grid){
        int n = grid.length;
        int m = grid[0].length;
        if(ro<0 || ro>=n||co<0 ||co>=m||grid[ro][co]=='0'||vis[ro][co])return ;
        vis[ro][co] = true;
        if(grid[ro][co]=='1'){
            bfs(ro,co-1,vis,grid);
            bfs(ro,co+1,vis,grid);
            bfs(ro-1,co,vis,grid);
            bfs(ro+1,co,vis,grid);
            bfs(ro-1,co-1,vis,grid);
            bfs(ro-1,co+1,vis,grid);
            bfs(ro+1,co-1,vis,grid);
            bfs(ro+1,co+1,vis,grid);
        }
    }
}
class Pair{
    int first;
    int second;
    Pair(int first,int second){
        this.first = first;
        this.second = second;
    }
}