//{ Driver Code Starts
// Initial Template for Java

import java.util.*;
import java.lang.*;
import java.io.*;

// Position this line where user code will be pasted.

class GFG {
    public static void main(String[] args) throws IOException {
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        while (T-- > 0) {
            int n = sc.nextInt();
            int m = sc.nextInt();
            int[][] grid = new int[n][m];

            for (int i = 0; i < n; i++) {

                for (int j = 0; j < m; j++) {
                    grid[i][j] = sc.nextInt();
                }
            }
            int[] source = new int[2];
            for (int i = 0; i < 2; i++) {
                int x = sc.nextInt();
                source[i] = x;
            }
            int[] dest = new int[2];
            for (int i = 0; i < 2; i++) {
                int x = sc.nextInt();
                dest[i] = x;
            }
            Solution ob = new Solution();
            int ans = ob.shortestPath(grid, source, dest);
            System.out.println(ans);
        }
    }
}
// } Driver Code Ends


// User function Template for Java

class Solution {
    public static class pair{
        int i, j, sum;
        pair(int a, int b, int add){
            i = a;
            j = b;
            sum = add;
        }
    }
    
    public static int N, M, destX, destY, Result;
    
    public static boolean check(int i, int j, int grid[][]){
        return(i >= 0 && i < N && j >= 0 && j < M && grid[i][j] != 0);
    }
    
    public static int BFS(int a, int b, int[][] grid, boolean[][] visited){
        Queue<pair> pq = new LinkedList<>();
        pq.add(new pair(a, b, 0));
        visited[a][b] = true;
        int x[] = {0, 0, 1, -1};
        int y[] = {-1, 1, 0, 0};
        
        while(!pq.isEmpty()){
            pair p = pq.poll();
            int ai = p.i;
            int bj = p.j;
            int sum = p.sum;
            
            if(ai == destX && bj == destY) return sum;
            
            for(int i = 0; i < 4; i++){
                int aix = ai + x[i];
                int bjy = bj + y[i];
                
                if(check(aix, bjy, grid) && (!visited[aix][bjy])){
                    visited[aix][bjy] = true;
                    pq.add(new pair(aix, bjy, sum+1));
                }
            }
        }
        
        return -1;
    }
    
    int shortestPath(int[][] grid, int[] source, int[] destination) {
        int srcX = source[0], srcY = source[1];
        destX = destination[0];
        destY = destination[1];
        N = grid.length;
        M = grid[0].length;
        Result = 0;
        if((!check(srcX, srcY, grid)) || (!check(destX, destY, grid))) return -1;
        
        boolean[][] visited = new boolean[N][M];
        return BFS(srcX, srcY, grid, visited);
    }
}
