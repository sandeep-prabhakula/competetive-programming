//{ Driver Code Starts
// Initial Template for Java

import java.io.*;
import java.util.*;
class GFG {
    public static void main(String args[]) throws IOException {
        BufferedReader read =
            new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(read.readLine());
        while (t-- > 0) {
            int N, M, x, y;
            String S[] = read.readLine().split(" ");
            N = Integer.parseInt(S[0]);
            M = Integer.parseInt(S[1]);
            int a[][] = new int[N][M];
            for (int i = 0; i < N; i++) {
                String s[] = read.readLine().split(" ");
                for (int j = 0; j < M; j++) a[i][j] = Integer.parseInt(s[j]);
            }
            String s1[] = read.readLine().split(" ");
            x = Integer.parseInt(s1[0]);
            y = Integer.parseInt(s1[1]);
            Solution ob = new Solution();
            System.out.println(ob.shortestDistance(N, M, a, x, y));
        }
    }
}
// } Driver Code Ends


// User function Template for Java
class Pair{
    int first;
    int second;
    Pair(int first,int second){
        this.first = first;
        this.second = second;
    }
}
class Solution {
    int shortestDistance(int N, int M, int A[][], int X, int Y) {
        Queue<Pair>q = new LinkedList();
        if(A[0][0]==0)return -1;
        q.add(new Pair(0,0));
        A[0][0] = 0;
        int dx[] = {-1,0,0,1};
        int dy[] = {0,-1,1,0};
        int dis = 0;
        while(!q.isEmpty()){
            int n = q.size();
            while(n-->0){
                Pair p = q.poll();
                int i = p.first;
                int j = p.second;
                if(i==X && j==Y)return dis;
                for(int k=0;k<4;k++){
                    int nx = i+dx[k];
                    int ny = j+dy[k];
                    if(nx>=0 && nx<N && ny>=0 && ny<M && A[nx][ny]!=0){
                        A[nx][ny] = 0;
                        q.add(new Pair(nx,ny));
                    }
                }
            }
            dis += 1;
        }
        return -1;
    }
};
