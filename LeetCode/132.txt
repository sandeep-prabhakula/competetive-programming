class Solution {
    public int minCut(String str) {
        int n = str.length();
        int[]dp = new int[n];
        Arrays.fill(dp,-1);
        return f(0,n,str,dp)-1;
    }
    public int f(int i,int n,String a,int []dp){
        if(i==n)return 0;
        if(dp[i]!=-1)return dp[i];
        int minCost = Integer.MAX_VALUE;
        for(int j=i;j<n;j++){
            if(isPalindrome(i,j,a)){
                int cost = 1+f(j+1,n,a,dp);
                minCost = Math.min(cost,minCost);
            }
        }
        return dp[i] = minCost;
    }
    public boolean isPalindrome(int i,int j,String a){
        while(i<j){
            if(a.charAt(i)!=a.charAt(j))return false;
            i++;
            j--;
        }
        return true;
    }
}