class Solution {
    public int orangesRotting(int[][] grid) {
        if(grid == null || grid.length == 0) return 0;
        int fresh = 0;
        int n = grid.length;
        int m = grid[0].length;
        int count = 0;
        Queue<Pair>q = new LinkedList();
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==1)fresh++;
                if(grid[i][j]==2)q.add(new Pair(i,j));
            }
        }
        if(fresh==0)return 0;
        int dx[] = {0,0,1,-1};
        int dy[] = {1,-1,0,0};
        while(!q.isEmpty()){
            count++;
            int size = q.size();
            for(int i=0;i<size;i++){
                Pair node = q.poll();
                int a = node.first;
                int b = node.second;
                for(int j=0;j<4;j++){
                    int x = a+dx[j];
                    int y = b+dy[j];
                    if(x<0||y<0||x>=n||y>=m||grid[x][y]==0||grid[x][y]==2)continue;
                    q.add(new Pair(x,y));
                    grid[x][y] = 2;
                    fresh--;
                }
            }
        }
        return fresh==0?count-1:-1; 
    }
}
class Pair{
    int first;
    int second;
    Pair(int first,int second){
        this.first = first;
        this.second = second;
    }
}