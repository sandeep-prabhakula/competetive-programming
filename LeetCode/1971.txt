class Solution {
    public boolean validPath(int n, int[][] edges, int src, int d) {
        List<List<Integer>>adj = new ArrayList<>();
        for(int i=1;i<=n;i++){
            adj.add(new ArrayList<Integer>());
        }
        for(int i=0;i<edges.length;i++){
            int u = edges[i][0];
            int v = edges[i][1];
            adj.get(u).add(v);
            adj.get(v).add(u);
        }
        boolean [] vis = new boolean[n+1];
        return dfs(adj,vis,src,d);
    }
    public boolean dfs(List<List<Integer>>adj,boolean [] vis,int s,int d){
        if(s==d)return true;
        vis[s] = true;
        for(int i:adj.get(s)){
            if(!vis[i]){
                if(dfs(adj,vis,i,d))return true;
            }
        }
        return false;
    }
}