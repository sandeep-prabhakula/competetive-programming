/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

// convert bst to greater tree;
// Given the root of a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus the sum of all keys greater than the original key in BST.
class Solution {
    int sum = 0;
    public TreeNode convertBST(TreeNode root) {
        if(root == null)return null;
        
        //  node traverse the right subtree;
        convertBST(root.right);
        
        // add the sum of the right subtree to the root;
        sum += root.val;
        
        // override root value;
        root.val = sum;
        
        // traverse the next node;
        convertBST(root.left);
        return root;
    }
}