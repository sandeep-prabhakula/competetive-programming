class Solution {
    int[][] dp;
    public String shortestCommonSupersequence(String str1, String str2) { 
        int lcsLen = longestCommonSubsequence(str1, str2); 
        int m = str1.length();
        int n = str2.length();
        int i = m, j = n;
        String lcsStr = "";
        
        while(i > 0 && j > 0) {
            if(str1.charAt(i-1) == str2.charAt(j-1)) {
                lcsStr = str1.charAt(i-1) + lcsStr;
                i--;
                j--;
            }
            else {
                if(dp[i-1][j] > dp[i][j-1]) {
                    i--;
                }
                else 
                    j--;
            }
        }
        String res = "";
        int x=0, y=0;
        char[] arr = lcsStr.toCharArray();
        
        for(char c : arr) {
            while(str1.charAt(x) != c)
                res += str1.charAt(x++);
            while(str2.charAt(y) != c)
                res += str2.charAt(y++);
            
            res += c;
            x++;
            y++;
        }
        return res + str1.substring(x) + str2.substring(y);
    }
    
    public int longestCommonSubsequence(String text1, String text2) {  
        int m = text1.length();
        int n = text2.length();
        dp = new int[m+1][n+1];
        findAns(text1, m, text2, n); 
        return dp[m][n];
    }
    
    public void findAns(String text1, int m, String text2, int n) {
        for(int i=0; i<=m; i++) {
            for(int j=0; j<=n; j++) {
                if(i == 0 || j == 0)
                    dp[i][j] = 0;
                else if(text1.charAt(i-1) == text2.charAt(j-1))
                    dp[i][j] = 1 + dp[i-1][j-1];
                else 
                    dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]);
            }
        }
    }
}