class Solution {
    public int minFallingPathSum(int[][] a) {
        int n = a.length;
        int m = a[0].length;
        int [][]dp = new int[n][m];
        for(int[]i:dp)Arrays.fill(i,-1);
        int min = Integer.MAX_VALUE;
        for(int i=0;i<m;i++){
            min = Math.min(min,path(n-1,i,a,dp));
        }
        return min;
    }
    public int path(int i,int j,int[][]a,int[][]dp){
        if(j<0 || j>=a[0].length)return (int)1e9;
        if(i==0)return a[0][j];
        if(dp[i][j]!=-1)return dp[i][j];
        int up = a[i][j]+path(i-1,j,a,dp);
        int ld = a[i][j]+path(i-1,j-1,a,dp);
        int rd = a[i][j]+path(i-1,j+1,a,dp);
        return dp[i][j] = Math.min(up,Math.min(ld,rd));
    }
}