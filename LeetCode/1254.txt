class Solution {
    public int closedIsland(int[][] grid) {
        int n = grid.length;
        int m = grid[0].length;
        boolean [][] vis = new boolean[n][m];
        int count = 0;
        for(int i=1;i<n-1;i++){
            for(int j=1;j<m-1;j++){
                if(grid[i][j]==0 && !vis[i][j]){
                    boolean closed = dfs(grid,vis,i,j);
                    if(closed)count++;
                }
            }
        }
        return count;
    }
    public boolean dfs(int[][] grid,boolean [][] vis,int i,int j){
        int n = grid.length;
        int m = grid[0].length;
        if(i<0 || i>=n ||j<0 ||j>=m)return false;
        if(vis[i][j])return true;
        vis[i][j] = true;
        if(grid[i][j]==1)return true;
        boolean close = true;
        close &= dfs(grid,vis,i+1,j);
        close &= dfs(grid,vis,i-1,j);
        close &= dfs(grid,vis,i,j+1);
        close &= dfs(grid,vis,i,j-1);
        return close;
    }
}