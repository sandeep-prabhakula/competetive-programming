// Target Sum
package com.sandeepprabhakula.dp;

import java.io.*;

public class TargetSum {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        int n = Integer.parseInt(br.readLine());
        String [] temp = br.readLine().split(" ");
        int diff = Integer.parseInt(br.readLine());
        int[]a = new int[n];
        for(int i=0;i<n;i++){
            a[i] = Integer.parseInt(temp[i]);
        }
        bw.write(findTargetSumWays(a,diff)+"\n");
        bw.flush();
    }
    public static int findTargetSumWays(int[] nums, int target) {

        int n = nums.length;
        int sum = 0;
        for (int i : nums) sum += i;
        if (sum < target || ((sum - target) & 1) != 0) return 0;
        int s1 = (sum - target) / 2;

        int dp[][] = new int[n + 1][s1 + 1];
        dp[0][0] = 1;

        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= s1; j++) {
                if (i == 0) dp[i][j] = 0;
                if (j == 0) dp[i][j] = 1;
            }
        }
        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= s1; j++) {
                if (nums[i - 1] <= j) dp[i][j] = dp[i - 1][j] + dp[i - 1][j - nums[i - 1]];
                else dp[i][j] = dp[i - 1][j];
            }
        }

        return dp[n][s1];
    }

}
