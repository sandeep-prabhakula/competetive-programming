class Solution {
    public int jobScheduling(int[] startTime, int[] endTime, int[] profit) {
        int n = profit.length;
        Job[]jobs = new Job[n];
        for(int i=0;i<n;i++){
            jobs[i] = new Job(startTime[i],endTime[i],profit[i]);
        }
        return f(jobs);
    }
    public int f(Job[]jobs){
        Arrays.sort(jobs,Comparator.comparingInt(a->a.end));
        int n = jobs.length;
        int[]dp = new int[n];
        dp[0] = jobs[0].profit;
        for(int i=1;i<n;i++){
            int profit = jobs[i].profit;
            int l = search(jobs,i);
            if(l!=-1)profit+=dp[l];
            dp[i] = Math.max(profit,dp[i-1]);
        }
        return dp[n-1];
    }
    public int search(Job[]jobs, int index){
        int l = 0;
        int r = index-1;
        while(l<=r){
            int mid = (l+r)/2;
            if(jobs[mid].end<=jobs[index].start){
                if(jobs[mid+1].end<=jobs[index].start)l = mid+1;
                else return mid;
            }else r= mid-1;
        }
        return -1;
    }
}
class Job{
    int start;
    int end;
    int profit;
    Job(int start,int end,int profit){
        this.start = start;
        this.end = end;
        this.profit = profit;
    }
}