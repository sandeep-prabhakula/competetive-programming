import java.util.*;

public class Solution {
    public static int ninjaTraining(int n, int points[][]) {
        
        // Tabulation
        
//         int dp[][] = new int[n][4];
//         dp[0][0] = Math.max(points[0][1],points[0][2]);
//         dp[0][1] = Math.max(points[0][0],points[0][2]);
//         dp[0][2] = Math.max(points[0][0],points[0][1]);
//         dp[0][3] = Math.max(points[0][0],Math.max(points[0][1],points[0][2]));
//         for(int day=1;day<n;day++){
//             for(int last=0;last<4;last++){
//                 dp[day][last] = 0;
//                 for(int task=0;task<3;task++){
//                     if(task!=last){
//                         int marks = points[day][task]+dp[day-1][task];
//                         dp[day][last] = Math.max(dp[day][last],marks);                    
//                     }
//                 }
//             }
//         }
//         return dp[n-1][3];
        
        int prev[] = new int[4];
        prev[0] = Math.max(points[0][1],points[0][2]);
        prev[1] = Math.max(points[0][0],points[0][2]);
        prev[2] = Math.max(points[0][0],points[0][1]);
        prev[3] = Math.max(points[0][0],Math.max(points[0][1],points[0][2]));
        for(int day=1;day<n;day++){
            int [] temp = new int[4];
            for(int last=0;last<4;last++){
                temp[last] = 0;
                for(int task=0;task<3;task++){
                    if(task!=last){
                        int marks = points[day][task]+prev[task];
                        temp[last] = Math.max(temp[last],marks);                    
                    }
                }
            }
            prev = temp;
        }
        return prev[3];
    }
    
    
    //memoization code
    
//     public static int maxPoints(int day,int last,int[][]points,int[][]dp){
    // initially day = n-1;
    // last = 3;
//         if(dp[day][last]!=-1)return dp[day][last];
//         if(day==0){
//             int max = 0;
//             for(int i=0;i<3;i++){
//                 if(i!=last){
//                     max = Math.max(max,points[0][i]);
//                 }
//             }
//             return dp[day][last] = max;
//         }
//         int max = 0;
//         for(int i=0;i<3;i++){
//             if(i!=last){
//                 int marks = points[day][i]+maxPoints(day-1,i,points,dp);
//                 max = Math.max(max,marks);
//             }
//         }
//         return dp[day][last] = max;
//     }
}